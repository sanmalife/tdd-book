[Step0 お金の投入と払い戻し]
■10円玉、50円玉、100円玉、500円玉、1000円札を1枚ずつ投入できる
　■引数はint
　■投入されたお金の額面が受け入れ可能かの確認
■投入は複数回できる
　■投入すると、総計が投入金額分増加する
■投入金額の総計を取得できる
　■初期状態の総計は0
　■投入金額はint
■払い戻し操作を行うと、投入金額の総計をつり銭として出力する
　　■払い戻し操作を行うと総計は0円になる
　■つり銭は投入したお金のリストとして取得できる
　　■投入したお金がない場合は空のリスト
　　■投入したお金がある場合は投入した順にお金が返る
　　■払い戻し操作を連続で行うと、2回目は空のリストが返る

[step1 扱えないお金]
■想定外のものが投入された場合は、投入金額に加算せず、そのままつり銭としてユーザに出力する
　■投入した時につり銭としてintが返る
　　■扱えるお金の場合は0が返る
　　■扱えないお金の場合は投入した金額がintで返る
　　■扱えないお金の場合は投入金額が増加しない

[step2 ジュースの管理]
■値段と名前の属性からなるジュースを1種類格納できる
　■自動販売機にstoreする
■初期状態で、コーラ（値段120円、名前"コーラ"）を5本格納している
　■コーラはJuiceクラスで表現する
■格納されているジュースの情報（値段と名前と在庫）を取得できる
　■ジュースが買える必要はまだない
■ジュースのequalsをちゃんと実装する

[step3 購入]
■投入金額在庫の点で、コーラが購入できるかを取得できる
　■110円では買えない
　■120円だと買える
　■在庫0だと120円でも買えない
■ジュースの値段以上の投入金額が投入されている条件下で購入操作を
　行うと、ジュースの在庫を減らし、売上金額を増やす
　■初期状態からコーラを1本買うと在庫が4本になる
　■初期状態からコーラを1本買うと売上金額が120円になる
　■初期状態からコーラを2本買うと在庫が3本になる
　■初期状態からコーラを2本買うと売上金額が240円になる
■投入金額が足りない場合もしくは在庫がない場合、購入操作を
　行なっても何もしない
　■何もしないとは
　　■投入金額総計が変化しない
　　■売上が変化しない
　　■在庫が変化しない
　■購入金額が足りない場合
　■在庫が足りない場合
■現在の売上金額を取得できる
　■初期状態では売上0円
　■コーラを1本買うと売上が120円増える
■払い戻し操作では現在の投入金額からジュース購入金額を引いた
　つり銭を出力する
　■購入可能な場合に、購入操作を行うと投入金額が値段分減少する

[いつかやる]
□Enclosed.classを使って状況を説明するテストを作成する
■assertThat化
