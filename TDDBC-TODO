[Step0 お金の投入と払い戻し]
■10円玉、50円玉、100円玉、500円玉、1000円札を1枚ずつ投入できる
　■引数はint
　■投入されたお金の額面が受け入れ可能かの確認
■投入は複数回できる
　■投入すると、総計が投入金額分増加する
■投入金額の総計を取得できる
　■初期状態の総計は0
　■投入金額はint
■払い戻し操作を行うと、投入金額の総計をつり銭として出力する
　　■払い戻し操作を行うと総計は0円になる
　■つり銭は投入したお金のリストとして取得できる
　　■投入したお金がない場合は空のリスト
　　■投入したお金がある場合は投入した順にお金が返る
　　■払い戻し操作を連続で行うと、2回目は空のリストが返る

[step1 扱えないお金]
■想定外のものが投入された場合は、投入金額に加算せず、そのままつり銭としてユーザに出力する
　■投入した時につり銭としてintが返る
　　■扱えるお金の場合は0が返る
　　■扱えないお金の場合は投入した金額がintで返る
　　■扱えないお金の場合は投入金額が増加しない

[step2 ジュースの管理]
■値段と名前の属性からなるジュースを1種類格納できる
　■自動販売機にstoreする
■初期状態で、コーラ（値段120円、名前"コーラ"）を5本格納している
　■コーラはJuiceクラスで表現する
■格納されているジュースの情報（値段と名前と在庫）を取得できる
　■ジュースが買える必要はまだない
■ジュースのequalsをちゃんと実装する

[step3 購入]
■投入金額在庫の点で、コーラが購入できるかを取得できる
　■110円では買えない
　■120円だと買える
　■在庫0だと120円でも買えない
■ジュースの値段以上の投入金額が投入されている条件下で購入操作を
　行うと、ジュースの在庫を減らし、売上金額を増やす
　■初期状態からコーラを1本買うと在庫が4本になる
　■初期状態からコーラを1本買うと売上金額が120円になる
　■初期状態からコーラを2本買うと在庫が3本になる
　■初期状態からコーラを2本買うと売上金額が240円になる
■投入金額が足りない場合もしくは在庫がない場合、購入操作を
　行なっても何もしない
　■何もしないとは
　　■投入金額総計が変化しない
　　■売上が変化しない
　　■在庫が変化しない
　■購入金額が足りない場合
　■在庫が足りない場合
■現在の売上金額を取得できる
　■初期状態では売上0円
　■コーラを1本買うと売上が120円増える
■払い戻し操作では現在の投入金額からジュース購入金額を引いた
　つり銭を出力する
　■購入可能な場合に、購入操作を行うと投入金額が値段分減少する

[step4]
■ジュースを3種類管理できるようにする
　■在庫にレッドブル（値段200円）を5本追加する
　■在庫に水（値段100円）を5本追加する
■ジュースの情報を取得できる
　■初期状態ではレッドブル（200円）、水（100円）、コーラ（120円）が5本ずつある
■投入金額、在庫の点で購入可能なドリンクのリストを取得できる
　■90円の時は空のリスト
　■100円の時は水だけのリスト
　■200円の時は水とコーラとレッドブルのリスト

[step5 釣り銭と売上管理]
■ジュース値段以上の投入金額が投入されている条件下で購入操作を行うと、
　釣り銭（投入金額とジュース値段の差分）を出力する
　■ジュースと投入金額が同じ場合、つまり、釣り銭0円の場合も0円と出力する
　■釣り銭の効果の種類は考慮しなくて良い
■購入できない場合は釣り銭として空のリストを返す

[step6 釣り銭ストックの導入]
■自動販売機は釣り銭ストックを持つことができる
■釣り銭用ストックを取得できる
　・釣り銭用ストックの表現はMap<Integer(額面), Integer(残数)>
■釣り銭ストックとして有効な各お札と硬貨10枚ずつを保持する
■釣り銭を返す際は、値段の大きなものから硬貨を優先して出力するようにする。
　ストックからなくなった硬貨は、可能であれば他の硬貨で補う。
　（例えば50円硬貨を10円硬貨で補う）
　■釣り銭には投入金額のお札及び硬貨も使える
　　（110円入れて、100円の水を買うといった場合のように余分に入れたお金も戻る）
　　・110円入れて100円の水を買う場合釣り銭ストックは減らない
■釣り銭を出力したら、釣り銭用ストックを減らす
　■初期状態で500円を入れて100円の水を買うと100円の釣り銭ストックが4枚になる
□購入操作を行った際に、釣り銭用ストックが足りない場合、何もしない。
　・釣り銭用ストックが足りないことの判定方法
　　→ 戻り値? 例外? 判定メソッド?

[あとでやる]
□purchageの処理の最後でrefund()を呼んでいるが、refund()は
　投入金額の針戻し操作であり、釣り銭の出力ではないので適切に変更する

[いつかやる]
■JuiceとStockのhashCode
■assertThat化
■Enclosed.classを使って状況を説明するテストを作成する
□APIの見直し
□Stock周りのDomainオブジェクトの整理・見直し

